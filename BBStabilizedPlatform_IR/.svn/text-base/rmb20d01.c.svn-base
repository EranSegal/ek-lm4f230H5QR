/*
  $Id: rmb20d01.c,v 1.11 2011/08/03 07:45:41 EranS Exp $
  $Log: rmb20d01.c,v $
  Revision 1.11  2011/08/03 07:45:41  EranS
  Do reset of decoders at higher duty cycle

  Revision 1.10  2011/07/20 06:49:47  EranS
  changed ITG rate to 100
  encoder init ar higher PWM
  telemetry changed

  Revision 1.9  2011/07/14 07:19:48  EranS
  added script engine

  Revision 1.8  2011/05/11 07:39:16  EranS
  Integrate with BB library, stow/pilot buttons now work

  Revision 1.7  2011/05/03 06:46:07  EranS
  After Eran rewire - pay attention to encoder pins

  Revision 1.6  2011/04/17 08:44:11  EranS
  add proper reset of encoders via GPIO

  Revision 1.5  2011/03/23 12:15:32  EranS
  PWM test works, added Stow and Pilot functions

  Revision 1.4  2011/03/22 15:42:49  EranS
  added telemetry
  fixed adc code

  Revision 1.3  2011/03/21 13:42:03  EranS
  fix adc code, add telemtry

  Revision 1.2  2011/03/15 15:00:45  EranS
  changed ADC functions

  Revision 1.1  2011/03/15 12:23:45  EranS
  First save

  Revision 1.2  2011/01/26 08:29:19  EranS
*/
#include <string.h>
#include <stdio.h>
#include "bluebird.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/debug.h"
#include "driverlib/gpio.h"
#include "driverlib/qei.h"
#include "driverlib/pwm.h"
#include "driverlib/sysctl.h"
#include "driverlib/systick.h"
#include "driverlib/timer.h"
#include "driverlib/adc.h"
#include "driverlib/interrupt.h"
#include "driverlib/rom.h"
#include "inc/hw_ints.h" 
#include "inc/lm4f230h5qr.h"
#include "A3906.h"
#include "GPIOhandler.h"
#include "utilities.h"
#include "SysTick.h"
#define RMB20_MAIN
#include "rmb20d01.h"
#include "Pins.h"
#include "uart_echo.h"
#include "encoder.h"


//*****************************************************************************
//
// The interrupt handler for the ADC interrupt.
//
//*****************************************************************************
void ADCIntHandler(void)
{
    int rc;  
    //
    // Clear the ADC interrupt.
    //
    ADCIntClear(ADC0_BASE, 1);
	
    //
    // Read the data from the ADC.
    //
    rc = ADCSequenceDataGet(ADC0_BASE, 1, PitchRollAmp);
    if (rc == 2)  // should have read 2 samples
      new_adc = true;
    else
      memset(PitchRollAmp,0xff,sizeof(PitchRollAmp)); // so we know of error            
	
}

/****************************************************************************
*
*   Initialize the ADC to collect sample from our 4 line sensors.
*   ADC0 channel 0 
*   ADC0 channel 1 
*
****************************************************************************/

void RMBD01Init( void )
{
  unsigned long ulChan;

  //
  // Configure the ADC for Pitch and Roll
  // sequence 3 means a single sample
  // sequence 1, 2 means up to 4 samples
  // sequence 0 means up to 8 samples
  // we use sequence 1
  //
  if (SysCtlPeripheralPresent(SYSCTL_PERIPH_ADC0))
  {

    //
    // Set the ADC speed to 1 Msps.
    //
    SysCtlADCSpeedSet(SYSCTL_ADCSPEED_1MSPS);
  
    SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);

    //
    // Configure the pins to be used as analog inputs.
    //
    GPIOPinTypeADC(GPIO_PORTE_BASE, GPIO_PIN_2 | GPIO_PIN_3);

    //
    // Select the external reference for greatest accuracy.
    //
    ADCReferenceSet(ADC0_BASE, ADC_REF_EXT_3V);

	
    ADCSequenceConfigure(ADC0_BASE, 1, ADC_TRIGGER_TIMER, 0); // 1 captures up to 4 samples

    ADCSequenceStepConfigure(ADC0_BASE, 1, 0, ENCODER_CHANNEL_PITCH);     // sample pitch
    ADCSequenceStepConfigure(ADC0_BASE, 1, 1, ENCODER_CHANNEL_ROLL | ADC_CTL_IE | ADC_CTL_END);     // sample roll
    ADCIntRegister(ADC0_BASE,1,ADCIntHandler);
    ADCSequenceEnable(ADC0_BASE, 1);
    ADCIntEnable(ADC0_BASE, 1);


    //
    // Setup timer for ADC_TRIGGER_TIMER
    //
    SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER1);
	
    //
    // Configure the second timer to generate triggers to the ADC 
    //
    TimerConfigure(TIMER1_BASE, TIMER_CFG_32_BIT_PER);
    TimerLoadSet(TIMER1_BASE, TIMER_A, SysCtlClockGet() / 1000); // 2 ms
  
    TimerControlStall(TIMER1_BASE, TIMER_A, true);
    TimerControlTrigger(TIMER1_BASE, TIMER_A, true);

    //
    // Enable the timers.
    //	
    TimerEnable(TIMER1_BASE, TIMER_A);



	
    // Configure PORTE to Encode Roll & Encode Pitch resets
    //
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
    GPIOPinTypeGPIOOutput(GPIO_PORTE_BASE,(1<<ENCODER_PITCH_RESET_PIN) | (1<<ENCODER_ROLL_RESET_PIN));
    new_adc = false;
    //
  }
  //
  // Clear outstanding ADC interrupt and enable
  //
  ADCIntClear(ADC0_BASE, 1);
  IntEnable(INT_ADC0);
} // InitADC

